Creating the 10,000,000 floating point number file:

od -tf -N 80000000 < /dev/urandom |
sed s/"^[0-9]* *"// |
sed "s/  */ /g" |
tr ' ' '\n' > test

"od -tf -N 80000000 < /dev/urandom" : takes 80000000 bytes of data, i.e. 10000000 * 8
    bytes per float, from the urandom file, formatting them in textdump format

"sed s/"^[0-9]* *"//" : removes the byte index from each beginning of the file (along
   with unecessary spaces)

"sed "s/  */ /g" : removes all spaces, replacing them with just a single space

"tr ' ' '\n' > test" : replaces all spaces (of which there is only onee of between
   numbers) with a newline

Testing the sort command:

sort --version
   this is done to make sure that the sort version is >8.6, which would enable
   multithreading.

time sort -g test.txt > /dev/null

real        0m35.248s
user        3m17.533s
sys         0m0.548s

time sort -g --parallel=1 test.txt > /dev/null

real        2m59.639s
user        2m59.234s
sys         0m0.235s

time sort -g --parallel=2 test.txt > /dev/null

real        1m35.710s
user        3m2.042s
sys         0m0.367s

time sort -g --parallel=4 test.txt > /dev/null

real        0m56.306s
user        3m11.583s
sys         0m0.440s

time sort -g --parallel=8 test.txt > /dev/null

real        0m36.215s
user        3m17.845s
sys         0m0.533s

These findings cause us to conclude three things. First, that the sort command w/o the
usage of parallel uses the maximum amount of threads possible, in this case using 8,
in order to speed up the process as much as possible. Secondly, each additional thread
roughly decreases the time by half of the previous, which would make sense as we are
doubling the amount of threads (in actuality, there is seemingly a flat amount added of
around 6 seconds per split). Thirdly, that user time does not decrease but the sys
time does increase after every doubling. This would indicate that the joining and splitting
of the threads occur in sys time, althought the increase is very small.

